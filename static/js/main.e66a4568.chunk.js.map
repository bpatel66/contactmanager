{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContacts.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","response","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","async","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","NotFound","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e66a4568.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(\r\n                    contact => contact.id !== action.payload\r\n                )\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact =>\r\n                    contact.id === action.payload.id\r\n                        ? (contact = action.payload)\r\n                        : contact\r\n                )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const response = await axios.get(\r\n            'https://jsonplaceholder.typicode.com/users'\r\n        );\r\n\r\n        this.setState({ contacts: (await response).data });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        try {\r\n            await axios.delete(\r\n                `https://jsonplaceholder.typicode.com/users/${id}`\r\n            );\r\n\r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        } catch (e) {\r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card text-white bg-dark card-body mb-3\">\r\n                            <h4>\r\n                                {name}{' '}\r\n                                <i\r\n                                    onClick={() =>\r\n                                        this.setState({\r\n                                            showContactInfo: !this.state\r\n                                                .showContactInfo\r\n                                        })\r\n                                    }\r\n                                    className=\"fa fa-sort-down\"\r\n                                    style={{ cursor: 'pointer' }}\r\n                                ></i>\r\n                                <i\r\n                                    className=\"fa fa-times\"\r\n                                    style={{\r\n                                        cursor: 'pointer',\r\n                                        float: 'right',\r\n                                        color: 'red'\r\n                                    }}\r\n                                    onClick={this.onDeleteClick.bind(\r\n                                        this,\r\n                                        id,\r\n                                        dispatch\r\n                                    )}\r\n                                ></i>\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i\r\n                                        className=\"fa fa-pencil\"\r\n                                        style={{\r\n                                            cursor: 'pointer',\r\n                                            float: 'right',\r\n                                            color: 'black',\r\n                                            marginRight: '1rem'\r\n                                        }}\r\n                                    ></i>\r\n                                </Link>\r\n                            </h4>\r\n                            {showContactInfo ? (\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">\r\n                                        Email: {email}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Phone: {phone}\r\n                                    </li>\r\n                                </ul>\r\n                            ) : null}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\n\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contacts extends Component {\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger \">Contact</span>{' '}\r\n                                <span className=\"text-white\">List</span>\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact key={contact.id} contact={contact} />\r\n                            ))}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = props => {\r\n    const { branding } = props;\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-3 py-0\">\r\n                <div className=\"container\">\r\n                    <Link href=\"/\" className=\"navbar-brand\">\r\n                        {branding}\r\n                    </Link>\r\n                    <div>\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/\" className=\"nav-link\">\r\n                                    <i className=\"fa fa-home\"></i> Home\r\n                                </Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                    <i className=\"fa fa-plus\"></i> Add Contact\r\n                                </Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/about\" className=\"nav-link\">\r\n                                    <i className=\"fa fa-question\"></i> About\r\n                                </Link>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group text-light bg-dark\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type={type}\r\n                name={name}\r\n                className={classnames(\r\n                    'form-control form-control-lg text-light',\r\n                    {\r\n                        'is-invalid': error\r\n                    }\r\n                )}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const { name, email, phone } = this.state;\r\n\r\n        if (name === '') {\r\n            this.setState({\r\n                errors: {\r\n                    name: 'Name is Required'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (email === '') {\r\n            this.setState({\r\n                errors: {\r\n                    email: 'Email is Required'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (phone === '') {\r\n            this.setState({\r\n                errors: {\r\n                    phone: 'Phone Number is Required'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const response = await axios.post(\r\n            'https://jsonplaceholder.typicode.com/users',\r\n            newContact\r\n        );\r\n\r\n        dispatch({ type: 'ADD_CONTACT', payload: response.data });\r\n\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = e =>\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card text-light bg-dark mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body text-light bg-dark\">\r\n                                <form\r\n                                    onSubmit={this.onSubmit.bind(\r\n                                        this,\r\n                                        dispatch\r\n                                    )}\r\n                                >\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name...\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email...\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone Number...\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Add Contact\"\r\n                                        className=\"btn btn-light btn-block bg-dark text-light\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const response = await axios.get(\r\n            `https://jsonplaceholder.typicode.com/users/${id}`\r\n        );\r\n\r\n        const contact = response.data;\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const { name, email, phone } = this.state;\r\n\r\n        if (name === '') {\r\n            this.setState({\r\n                errors: {\r\n                    name: 'Name is Required'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (email === '') {\r\n            this.setState({\r\n                errors: {\r\n                    email: 'Email is Required'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (phone === '') {\r\n            this.setState({\r\n                errors: {\r\n                    phone: 'Phone Number is Required'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const { id } = this.props.match.params;\r\n        const response = await axios.put(\r\n            `https://jsonplaceholder.typicode.com/users/${id}`,\r\n            updContact\r\n        );\r\n\r\n        dispatch({ type: 'UPDATE_CONTACT', payload: response.data });\r\n\r\n        // Clears State (Input Group) after submit\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = e =>\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3 bg-dark text-light\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form\r\n                                    onSubmit={this.onSubmit.bind(\r\n                                        this,\r\n                                        dispatch\r\n                                    )}\r\n                                >\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name...\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email...\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone Number...\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Update Contact\"\r\n                                        className=\"btn btn-light btn-block bg-dark text-light\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditContact;\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4 text-danger\">About Contact Manager</h1>\r\n            <p className=\"lead text-white\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">\r\n                <span className=\"text-danger\">404</span> Page Not Found\r\n            </h1>\r\n            <p className=\"lead\">Sorry that does not exist.</p>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContacts';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n    return (\n        <Provider>\n            <Router>\n                <div className=\"App\">\n                    <Header branding=\"Contact Manager\" />\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\" component={Contacts} />\n                            <Route\n                                exact\n                                path=\"/contact/add\"\n                                component={AddContact}\n                            />\n                            <Route\n                                exact\n                                path=\"/contact/edit/:id\"\n                                component={EditContact}\n                            />\n                            <Route exact path=\"/about\" component={About} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}